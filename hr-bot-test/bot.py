import logging
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from telegram.error import TelegramError
import config
from database import get_session, User

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

async def check_group_membership(context: ContextTypes.DEFAULT_TYPE, user_id: int) -> bool:
    try:
        member = await context.bot.get_chat_member(chat_id=config.GROUP_ID, user_id=user_id)
        return member.status in ['member', 'administrator', 'creator']
    except TelegramError as e:
        logger.error(f"Error checking group membership: {e}")
        return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    
    is_member = await check_group_membership(context, user.id)
    is_admin = str(user.id) == config.HOST_ADMIN_TELEGRAM_ID
    
    if not is_member and not is_admin:
        await update.message.reply_text(
            "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –í–∞—Å –Ω–µ—Ç –≤ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ.\n"
            "‚ùå –ö–µ—à—ñ—Ä—ñ“£—ñ–∑, —Å—ñ–∑–≥–µ “õ–æ–ª –∂–µ—Ç—ñ–º–¥—ñ–ª—ñ–∫ –∂–æ“õ. –°—ñ–∑ –±—ñ–∑–¥—ñ“£ —Ç–æ–ø—Ç–∞ –µ–º–µ—Å—Å—ñ–∑."
        )
        return
    
    
    session = get_session()
    db_user = session.query(User).filter_by(telegram_id=str(user.id)).first()
    
    if not db_user:
        db_user = User(
            telegram_id=str(user.id),
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        session.add(db_user)
        session.commit()
    
    session.close()
    
    keyboard = [
        [InlineKeyboardButton("üë• –û –∫–æ–º–ø–∞–Ω–∏–∏", callback_data='about_company'),
         InlineKeyboardButton("üìä –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", callback_data='personal_data')],
        [InlineKeyboardButton("üë®‚Äçüíº –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏", callback_data='employees'),
         InlineKeyboardButton("üìù –ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data='my_status')],
        [InlineKeyboardButton("üíº –í–∞–∫–∞–Ω—Å–∏–∏", callback_data='vacations'),
         InlineKeyboardButton("üéØ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data='submit_request')],
        [InlineKeyboardButton("üìπ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∏–¥–µ–æ", callback_data='suggest_video'),
         InlineKeyboardButton("‚ùì –û–ø—Ä–æ—Å—ã", callback_data='polls')],
        [InlineKeyboardButton("‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º", callback_data='write_all'),
         InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–∞—Ö", callback_data='status_info')],
        [InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app={'url': f'http://10.128.0.79:5000'})]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}!\n\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SapaHR - —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º.\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=reply_markup
    )

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    data = query.data
    
    if data == 'about_company':
        await query.message.reply_text(
            "üè¢ –û –∫–æ–º–ø–∞–Ω–∏–∏ SAPA\n\n"
            "SAPA Technologies - –≤–µ–¥—É—â–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–æ–º–ø–∞–Ω–∏—è –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ.\n\n"
            f"–ù–∞—à–∏ –∫–æ–º–ø–∞–Ω–∏–∏:\n" + "\n".join([f"‚Ä¢ {comp}" for comp in config.COMPANIES])
        )
    
    elif data == 'personal_data':
        session = get_session()
        db_user = session.query(User).filter_by(telegram_id=str(user.id)).first()
        session.close()
        
        await query.message.reply_text(
            f"üë§ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n"
            f"–ò–º—è: {db_user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} {db_user.last_name or ''}\n"
            f"Username: @{db_user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"–ö–æ–º–ø–∞–Ω–∏—è: {db_user.company or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {db_user.position or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            f"–ë–∞–ª–ª—ã: {db_user.points} üèÜ"
        )
    
    elif data == 'employees':
        await query.message.reply_text("üë®‚Äçüíº –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
    
    elif data == 'my_status':
        await query.message.reply_text("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º —Å—Ç–∞—Ç—É—Å–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
    
    elif data == 'vacations':
        await query.message.reply_text("üèñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—É—Å–∫–∞–º–∏ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
    
    elif data == 'submit_request':
        await query.message.reply_text("üìù –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
    
    elif data == 'suggest_video':
        await query.message.reply_text("üìπ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤–∏–¥–µ–æ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
    
    elif data == 'polls':
        await query.message.reply_text("‚ùì –û–ø—Ä–æ—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
    
    elif data == 'write_all':
        await query.message.reply_text("‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
    
    elif data == 'status_info':
        await query.message.reply_text(
            "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–∞—Ö:\n\n"
            "üü¢ –ê–∫—Ç–∏–≤–Ω—ã–π - —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ—Ñ–∏—Å–µ\n"
            "üü° –£–¥–∞–ª–µ–Ω–Ω–æ - —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–∑ –¥–æ–º–∞\n"
            "üî¥ –û—Ç–ø—É—Å–∫ - –≤ –æ—Ç–ø—É—Å–∫–µ\n"
            "‚ö´ –ë–æ–ª—å–Ω–∏—á–Ω—ã–π - –Ω–∞ –±–æ–ª—å–Ω–∏—á–Ω–æ–º"
        )

def run_bot():
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    
    application = Application.builder().token(config.BOT_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_callback))
    
    logger.info("Bot started")
    application.run_polling(allowed_updates=Update.ALL_TYPES)
